{
  "metadata": {
    "theme": "dark",
    "primary_color": "#1e88e5",
    "secondary_color": "#43a047",
    "background_color": "#0a0a0a",
    "text_color": "#ffffff",
    "accent_color": "#ff7043"
  },
  "scenes": [
    {
      "scene_id": 1,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n}\n.container {\n  text-align: center;\n  padding: 60px;\n  max-width: 90%;\n  position: relative;\n  z-index: 2;\n}\n.title {\n  font-size: 80px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 30px;\n  text-shadow: 0 0 30px rgba(30, 136, 229, 0.5);\n  animation: glow 2s ease-in-out infinite alternate;\n}\n.subtitle {\n  font-size: 42px;\n  font-weight: 300;\n  color: #43a047;\n  margin-bottom: 40px;\n  opacity: 0.9;\n}\n.description {\n  font-size: 28px;\n  line-height: 1.6;\n  max-width: 1200px;\n  margin: 0 auto;\n  opacity: 0.8;\n  font-weight: 300;\n}\n.bg-pattern {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.1;\n  background-image: radial-gradient(circle at 25% 25%, #1e88e5 2px, transparent 2px),\n                    radial-gradient(circle at 75% 75%, #43a047 2px, transparent 2px);\n  background-size: 50px 50px;\n  z-index: 1;\n}\n@keyframes glow {\n  from { text-shadow: 0 0 30px rgba(30, 136, 229, 0.5); }\n  to { text-shadow: 0 0 50px rgba(30, 136, 229, 0.8); }\n}\n</style>\n</head>\n<body>\n<div class=\"bg-pattern\"></div>\n<div class=\"container\">\n  <h1 class=\"title\">Longest Common Substring</h1>\n  <h2 class=\"subtitle\">Dynamic Programming Solution</h2>\n  <p class=\"description\">A comprehensive guide to understanding and implementing the longest common substring algorithm using dynamic programming</p>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 2,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 80px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n.title {\n  font-size: 64px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 50px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.problem {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 50px;\n  border-radius: 20px;\n  margin-bottom: 40px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n}\n.problem p {\n  font-size: 32px;\n  margin-bottom: 30px;\n  line-height: 1.5;\n}\n.example {\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  padding: 40px;\n  border-radius: 15px;\n  margin: 30px 0;\n  border-left: 6px solid #43a047;\n}\n.string {\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 36px;\n  color: #43a047;\n  margin: 20px 0;\n  text-align: center;\n}\n.highlight {\n  background: linear-gradient(45deg, #ff7043, #ff9800);\n  color: #000;\n  padding: 4px 8px;\n  border-radius: 6px;\n  font-weight: bold;\n  box-shadow: 0 2px 10px rgba(255, 112, 67, 0.4);\n}\n.result {\n  margin-top: 30px;\n  color: #1e88e5;\n  font-weight: bold;\n  font-size: 28px;\n  text-align: center;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">Problem Definition</h1>\n  <div class=\"problem\">\n    <p>Find the longest contiguous sequence of characters that appears in both strings.</p>\n    <div class=\"example\">\n      <div class=\"string\">String 1: AB<span class=\"highlight\">ABC</span></div>\n      <div class=\"string\">String 2: B<span class=\"highlight\">ABC</span>A</div>\n      <div class=\"result\">Longest Common Substring: \"ABC\" (length = 3)</div>\n    </div>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 3,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 80px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n.title {\n  font-size: 64px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 60px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.approaches {\n  display: flex;\n  gap: 40px;\n  height: auto;\n}\n.approach {\n  flex: 1;\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 50px;\n  border-radius: 20px;\n  border: 2px solid rgba(255, 255, 255, 0.1);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  transition: transform 0.3s ease;\n}\n.approach:hover {\n  transform: translateY(-10px);\n}\n.approach h3 {\n  font-size: 36px;\n  margin-bottom: 30px;\n  text-align: center;\n}\n.approach p {\n  font-size: 24px;\n  line-height: 1.6;\n  text-align: center;\n}\n.complexity {\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  padding: 30px;\n  border-radius: 15px;\n  margin: 30px 0;\n  border-left: 6px solid #43a047;\n}\n.complexity strong {\n  font-size: 26px;\n  color: #43a047;\n}\n.good {\n  color: #43a047;\n  text-shadow: 0 0 10px rgba(67, 160, 71, 0.5);\n}\n.bad {\n  color: #ff7043;\n  text-shadow: 0 0 10px rgba(255, 112, 67, 0.5);\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">Solution Approaches</h1>\n  <div class=\"approaches\">\n    <div class=\"approach\">\n      <h3 class=\"bad\">Brute Force: O(n³)</h3>\n      <p>Check all possible substrings - inefficient for large inputs</p>\n    </div>\n    <div class=\"approach\">\n      <h3 class=\"good\">Dynamic Programming: O(n×m)</h3>\n      <p>Build a table to track common substring lengths efficiently</p>\n      <div class=\"complexity\">\n        <strong>Key Insight:</strong> dp[i][j] = length of common substring ending at position i,j\n      </div>\n    </div>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 4,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 60px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.title {\n  font-size: 58px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 40px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.table-container {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 40px;\n  border-radius: 20px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  max-width: 90%;\n}\n.rule {\n  margin: 0 0 30px 0;\n  padding: 25px;\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  border-radius: 15px;\n  border-left: 6px solid #43a047;\n  font-size: 24px;\n  text-align: center;\n  color: #e8e8e8;\n}\n.dp-table {\n  border-collapse: collapse;\n  margin: 0 auto;\n  background: #2a2a2a;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);\n}\n.dp-table td, .dp-table th {\n  border: 2px solid #444;\n  padding: 15px 20px;\n  text-align: center;\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 20px;\n  font-weight: bold;\n}\n.dp-table th {\n  background: linear-gradient(145deg, #1e88e5, #2196f3);\n  color: #ffffff;\n  font-size: 22px;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n.dp-table tr:first-child th:first-child {\n  background: #333;\n}\n.dp-table tr th:first-child {\n  background: linear-gradient(145deg, #43a047, #4caf50);\n  color: #ffffff;\n}\n.match {\n  background: linear-gradient(145deg, #43a047, #4caf50) !important;\n  color: #ffffff !important;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 2px 4px rgba(255, 255, 255, 0.2);\n}\n.no-match {\n  background: #1e1e1e;\n  color: #888;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">DP Table Construction</h1>\n  <div class=\"table-container\">\n    <div class=\"rule\">Rule: If str1[i] == str2[j], then dp[i][j] = dp[i-1][j-1] + 1, else dp[i][j] = 0</div>\n    <table class=\"dp-table\">\n      <tr><th></th><th></th><th>A</th><th>B</th><th>A</th><th>B</th><th>C</th></tr>\n      <tr><th></th><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>\n      <tr><th>B</th><td>0</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td></tr>\n      <tr><th>A</th><td>0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"no-match\">0</td></tr>\n      <tr><th>B</th><td>0</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td></tr>\n      <tr><th>C</th><td>0</td><td class=\"no-match\">0</td><td class=\"no-match\">0</td><td class=\"no-match\">0</td><td class=\"no-match\">0</td><td class=\"match\">1</td></tr>\n      <tr><th>A</th><td>0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"match\">1</td><td class=\"no-match\">0</td><td class=\"no-match\">0</td></tr>\n    </table>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 5,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 60px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n.title {\n  font-size: 58px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 40px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.code-container {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 50px;\n  border-radius: 20px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n  max-height: 80%;\n}\n.code {\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 20px;\n  line-height: 1.8;\n  background: #0d1117;\n  padding: 40px;\n  border-radius: 15px;\n  border: 1px solid #30363d;\n  box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.5);\n  overflow: auto;\n  max-height: 100%;\n}\n.keyword {\n  color: #ff7043;\n  font-weight: bold;\n}\n.string {\n  color: #43a047;\n}\n.comment {\n  color: #6a737d;\n  font-style: italic;\n}\n.function {\n  color: #1e88e5;\n  font-weight: bold;\n}\n.number {\n  color: #ff9800;\n}\n.operator {\n  color: #e91e63;\n}\n.bracket {\n  color: #9c27b0;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">Implementation</h1>\n  <div class=\"code-container\">\n    <pre class=\"code\"><span class=\"comment\">/**\n * Finds the longest common substring between two strings\n * @param {string} str1 - First input string\n * @param {string} str2 - Second input string\n * @returns {string} - The longest common substring\n */</span>\n<span class=\"keyword\">function</span> <span class=\"function\">longestCommonSubstring</span><span class=\"bracket\">(</span>str1<span class=\"operator\">,</span> str2<span class=\"bracket\">)</span> <span class=\"bracket\">{</span>\n    <span class=\"comment\">// Get the lengths of input strings</span>\n    <span class=\"keyword\">const</span> m <span class=\"operator\">=</span> str1<span class=\"operator\">.</span>length<span class=\"operator\">;</span>\n    <span class=\"keyword\">const</span> n <span class=\"operator\">=</span> str2<span class=\"operator\">.</span>length<span class=\"operator\">;</span>\n    \n    <span class=\"comment\">// Initialize DP table with zeros</span>\n    <span class=\"keyword\">const</span> dp <span class=\"operator\">=</span> Array<span class=\"bracket\">(</span>m <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"bracket\">)</span><span class=\"operator\">.</span>fill<span class=\"bracket\">()</span><span class=\"operator\">.</span>map<span class=\"bracket\">(</span><span class=\"bracket\">(</span><span class=\"bracket\">)</span> <span class=\"operator\">=></span> Array<span class=\"bracket\">(</span>n <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"bracket\">)</span><span class=\"operator\">.</span>fill<span class=\"bracket\">(</span><span class=\"number\">0</span><span class=\"bracket\">)</span><span class=\"bracket\">)</span><span class=\"operator\">;</span>\n    \n    <span class=\"comment\">// Track maximum length and ending position</span>\n    <span class=\"keyword\">let</span> maxLength <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"operator\">;</span>\n    <span class=\"keyword\">let</span> endIndex <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"operator\">;</span>\n    \n    <span class=\"comment\">// Fill the DP table</span>\n    <span class=\"keyword\">for</span> <span class=\"bracket\">(</span><span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"operator\">;</span> i <span class=\"operator\"><=</span> m<span class=\"operator\">;</span> i<span class=\"operator\">++</span><span class=\"bracket\">)</span> <span class=\"bracket\">{</span>\n        <span class=\"keyword\">for</span> <span class=\"bracket\">(</span><span class=\"keyword\">let</span> j <span class=\"operator\">=</span> <span class=\"number\">1</span><span class=\"operator\">;</span> j <span class=\"operator\"><=</span> n<span class=\"operator\">;</span> j<span class=\"operator\">++</span><span class=\"bracket\">)</span> <span class=\"bracket\">{</span>\n            <span class=\"keyword\">if</span> <span class=\"bracket\">(</span>str1<span class=\"bracket\">[</span>i <span class=\"operator\">-</span> <span class=\"number\">1</span><span class=\"bracket\">]</span> <span class=\"operator\">===</span> str2<span class=\"bracket\">[</span>j <span class=\"operator\">-</span> <span class=\"number\">1</span><span class=\"bracket\">]</span><span class=\"bracket\">)</span> <span class=\"bracket\">{</span>\n                dp<span class=\"bracket\">[</span>i<span class=\"bracket\">]</span><span class=\"bracket\">[</span>j<span class=\"bracket\">]</span> <span class=\"operator\">=</span> dp<span class=\"bracket\">[</span>i <span class=\"operator\">-</span> <span class=\"number\">1</span><span class=\"bracket\">]</span><span class=\"bracket\">[</span>j <span class=\"operator\">-</span> <span class=\"number\">1</span><span class=\"bracket\">]</span> <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"operator\">;</span>\n                <span class=\"keyword\">if</span> <span class=\"bracket\">(</span>dp<span class=\"bracket\">[</span>i<span class=\"bracket\">]</span><span class=\"bracket\">[</span>j<span class=\"bracket\">]</span> <span class=\"operator\">></span> maxLength<span class=\"bracket\">)</span> <span class=\"bracket\">{</span>\n                    maxLength <span class=\"operator\">=</span> dp<span class=\"bracket\">[</span>i<span class=\"bracket\">]</span><span class=\"bracket\">[</span>j<span class=\"bracket\">]</span><span class=\"operator\">;</span>\n                    endIndex <span class=\"operator\">=</span> i<span class=\"operator\">;</span>\n                <span class=\"bracket\">}</span>\n            <span class=\"bracket\">}</span>\n        <span class=\"bracket\">}</span>\n    <span class=\"bracket\">}</span>\n    \n    <span class=\"keyword\">return</span> str1<span class=\"operator\">.</span>substring<span class=\"bracket\">(</span>endIndex <span class=\"operator\">-</span> maxLength<span class=\"operator\">,</span> endIndex<span class=\"bracket\">)</span><span class=\"operator\">;</span>\n<span class=\"bracket\">}</span></pre>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 6,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 80px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n.title {\n  font-size: 58px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 50px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.example {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 60px;\n  border-radius: 20px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n}\n.strings {\n  display: flex;\n  justify-content: space-around;\n  margin: 40px 0;\n  gap: 40px;\n}\n.string-box {\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  padding: 30px;\n  border-radius: 15px;\n  border-left: 6px solid #43a047;\n  flex: 1;\n  text-align: center;\n}\n.string {\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 32px;\n  color: #43a047;\n  font-weight: bold;\n}\n.result {\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  padding: 40px;\n  border-radius: 15px;\n  margin: 40px 0;\n  text-align: center;\n  border: 2px solid rgba(67, 160, 71, 0.3);\n}\n.result h3 {\n  font-size: 36px;\n  color: #1e88e5;\n  margin-bottom: 30px;\n}\n.step {\n  font-size: 24px;\n  margin: 15px 0;\n  padding: 15px;\n  background: rgba(30, 136, 229, 0.1);\n  border-radius: 10px;\n  border-left: 4px solid #1e88e5;\n}\n.highlight {\n  background: linear-gradient(45deg, #ff7043, #ff9800);\n  color: #000;\n  padding: 6px 12px;\n  border-radius: 8px;\n  font-weight: bold;\n  box-shadow: 0 2px 10px rgba(255, 112, 67, 0.4);\n  font-size: 28px;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">Example Walkthrough</h1>\n  <div class=\"example\">\n    <div class=\"strings\">\n      <div class=\"string-box\">\n        <div>String 1:</div>\n        <div class=\"string\">ABABC</div>\n      </div>\n      <div class=\"string-box\">\n        <div>String 2:</div>\n        <div class=\"string\">BABCA</div>\n      </div>\n    </div>\n    <div class=\"result\">\n      <h3>Step-by-step trace:</h3>\n      <div class=\"step\">1. Compare each character pair and build DP table</div>\n      <div class=\"step\">2. Track maximum substring length = 4</div>\n      <div class=\"step\">3. Identify ending position of longest substring</div>\n      <div class=\"step\">4. Extract result: <span class=\"highlight\">BABC</span></div>\n    </div>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 7,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 80px;\n  overflow: hidden;\n}\n.container {\n  max-width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n.title {\n  font-size: 58px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 60px;\n  text-align: center;\n  text-shadow: 0 0 20px rgba(30, 136, 229, 0.5);\n}\n.optimization {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 60px;\n  border-radius: 20px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n}\n.comparison {\n  display: flex;\n  justify-content: space-between;\n  gap: 50px;\n  margin-bottom: 40px;\n}\n.before, .after {\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  padding: 40px;\n  border-radius: 15px;\n  flex: 1;\n  text-align: center;\n  border: 2px solid rgba(255, 255, 255, 0.1);\n}\n.before {\n  border-left: 6px solid #ff7043;\n}\n.after {\n  border-left: 6px solid #43a047;\n}\n.before h3, .after h3 {\n  font-size: 32px;\n  margin-bottom: 30px;\n}\n.before p, .after p {\n  font-size: 24px;\n  line-height: 1.6;\n}\n.improvement {\n  color: #43a047;\n  font-weight: bold;\n  text-shadow: 0 0 10px rgba(67, 160, 71, 0.5);\n}\n.note {\n  margin-top: 40px;\n  font-style: italic;\n  font-size: 22px;\n  padding: 30px;\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  border-radius: 15px;\n  border-left: 6px solid #1e88e5;\n  line-height: 1.6;\n}\n</style>\n</head>\n<body>\n<div class=\"container\">\n  <h1 class=\"title\">Space Optimization</h1>\n  <div class=\"optimization\">\n    <div class=\"comparison\">\n      <div class=\"before\">\n        <h3>Original Approach</h3>\n        <p>Space Complexity: O(n × m)</p>\n        <p>Maintains full 2D DP table</p>\n        <p>Requires more memory</p>\n      </div>\n      <div class=\"after\">\n        <h3>Optimized Approach</h3>\n        <p>Space Complexity: <span class=\"improvement\">O(min(n,m))</span></p>\n        <p>Uses rolling array technique</p>\n        <p>Significantly reduced memory usage</p>\n      </div>\n    </div>\n    <p class=\"note\">💡 Since we only need the previous row to compute the current row, we can reduce space complexity significantly for large inputs by using a rolling array instead of storing the entire DP table.</p>\n  </div>\n</div>\n</body>\n</html>"
    },
    {
      "scene_id": 8,
      "html": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\nbody {\n  width: 1920px;\n  height: 1080px;\n  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);\n  color: #fff;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n}\n.container {\n  text-align: center;\n  padding: 60px;\n  position: relative;\n  z-index: 2;\n}\n.title {\n  font-size: 72px;\n  font-weight: 700;\n  color: #1e88e5;\n  margin-bottom: 50px;\n  text-shadow: 0 0 30px rgba(30, 136, 229, 0.5);\n  animation: glow 2s ease-in-out infinite alternate;\n}\n.summary {\n  background: linear-gradient(145deg, #1e1e1e, #2a2a2a);\n  padding: 60px;\n  border-radius: 20px;\n  margin-bottom: 50px;\n  border: 2px solid rgba(30, 136, 229, 0.3);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  max-width: 1200px;\n}\n.point {\n  margin: 25px 0;\n  font-size: 28px;\n  padding: 20px;\n  background: linear-gradient(145deg, #2e2e2e, #3a3a3a);\n  border-radius: 15px;\n  border-left: 6px solid #43a047;\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n.point::before {\n  content: '✓';\n  color: #43a047;\n  font-size: 32px;\n  font-weight: bold;\n}\n.complexity {\n  color: #43a047;\n  font-weight: bold;\n  text-shadow: 0 0 10px rgba(67, 160, 71, 0.5);\n}\n.thanks {\n  font-size: 42px;\n  color: #ff7043;\n  font-weight: 600;\n  text-shadow: 0 0 20px rgba(255, 112, 67, 0.5);\n  animation: pulse 2s ease-in-out infinite;\n}\n.bg-particles {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.1;\n  background-image: radial-gradient(circle at 20% 80%, #1e88e5 2px, transparent 2px),\n                    radial-gradient(circle at 80% 20%, #43a047 2px, transparent 2px),\n                    radial-gradient(circle at 40% 40%, #ff7043 2px, transparent 2px);\n  background-size: 100px 100px;\n  z-index: 1;\n  animation: float 20s ease-in-out infinite;\n}\n@keyframes glow {\n  from { text-shadow: 0 0 30px rgba(30, 136, 229, 0.5); }\n  to { text-shadow: 0 0 50px rgba(30, 136, 229, 0.8); }\n}\n@keyframes pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n</style>\n</head>\n<body>\n<div class=\"bg-particles\"></div>\n<div class=\"container\">\n  <h1 class=\"title\">Summary</h1>\n  <div class=\"summary\">\n    <div class=\"point\">DP approach with <span class=\"complexity\">O(n×m) time complexity</span></div>\n    <div class=\"point\">Efficiently tracks common substring lengths</div>\n    <div class=\"point\">Space can be optimized to <span class=\"complexity\">O(min(n,m))</span></div>\n    <div class=\"point\">Fundamental algorithm for string processing</div>\n  </div>\n  <p class=\"thanks\">Thanks for watching!</p>\n</div>\n</body>\n</html>"
    }
  ]
}